type ToDoItem{
    id: ID!
    title: String!
    completed: Boolean!
    user: User
} 

type User {
    id: ID!
    name: String!
    email: String!
    login: String!    
    todos: [ToDoItem!]!
}

type Query {     
    todos: [ToDoItem!]     
    todo(id: ID!): ToDoItem     
    users: [User!]     
    user(id: ID!): User
    book(id: ID!): Book
    books(page: Int, size: Int, sort: String): [Book!]
    author(id: ID!): Author
    authors(page: Int, size: Int, sort: String): [Author!]
    borrow(id: ID!): Borrow
    borrows(page: Int, size: Int, sort: String): [Borrow!]
}   

type Author {
  id: ID!
  firstName: String!
  lastName: String!
  country: String!
  birthDate: String!
  books: [Book!]
}

type Book {
  id: ID!
  title: String!
  author: Author!
  pages: Int!
  releaseDate: String!
}

type Borrow {
  id: ID!
  book: Book!
  borrowDate: String!
  returnDate: String!
}

type Mutation {
    createUser(name: String!, email: String!, login: String!): User!
    updateUser(id: ID!, name: String, email: String, login: String): User
    deleteUser(id: ID!): User
    createToDo(title: String!, completed: Boolean!, user_id: ID!): ToDoItem!
    updateToDo(id: ID!, title: String, completed: Boolean): ToDoItem
    deleteToDo(id: ID!): ToDoItem
}
